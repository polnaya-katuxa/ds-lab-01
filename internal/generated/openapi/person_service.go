// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// PersonRequest defines model for PersonRequest.
type PersonRequest struct {
	Address string  `json:"address"`
	Age     int32   `json:"age"`
	Name    string  `json:"name"`
	Work    *string `json:"work,omitempty"`
}

// PersonResponse defines model for PersonResponse.
type PersonResponse struct {
	Address string  `json:"address"`
	Age     int32   `json:"age"`
	Id      int32   `json:"id"`
	Name    string  `json:"name"`
	Work    *string `json:"work,omitempty"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	Errors  map[string]string `json:"errors"`
	Message string            `json:"message"`
}

// CreatePersonJSONRequestBody defines body for CreatePerson for application/json ContentType.
type CreatePersonJSONRequestBody = PersonRequest

// EditPersonJSONRequestBody defines body for EditPerson for application/json ContentType.
type EditPersonJSONRequestBody = PersonRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Persons
	// (GET /api/v1/persons)
	ListPersons(ctx echo.Context) error
	// Create new Person
	// (POST /api/v1/persons)
	CreatePerson(ctx echo.Context) error
	// Remove Person by ID
	// (DELETE /api/v1/persons/{id})
	DeletePerson(ctx echo.Context, id int32) error
	// Get Person by ID
	// (GET /api/v1/persons/{id})
	GetPerson(ctx echo.Context, id int32) error
	// Update Person by ID
	// (PATCH /api/v1/persons/{id})
	EditPerson(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListPersons converts echo context to params.
func (w *ServerInterfaceWrapper) ListPersons(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPersons(ctx)
	return err
}

// CreatePerson converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePerson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePerson(ctx)
	return err
}

// DeletePerson converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePerson(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePerson(ctx, id)
	return err
}

// GetPerson converts echo context to params.
func (w *ServerInterfaceWrapper) GetPerson(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPerson(ctx, id)
	return err
}

// EditPerson converts echo context to params.
func (w *ServerInterfaceWrapper) EditPerson(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditPerson(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/persons", wrapper.ListPersons)
	router.POST(baseURL+"/api/v1/persons", wrapper.CreatePerson)
	router.DELETE(baseURL+"/api/v1/persons/:id", wrapper.DeletePerson)
	router.GET(baseURL+"/api/v1/persons/:id", wrapper.GetPerson)
	router.PATCH(baseURL+"/api/v1/persons/:id", wrapper.EditPerson)

}
